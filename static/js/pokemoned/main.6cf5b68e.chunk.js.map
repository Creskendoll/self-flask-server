{"version":3,"sources":["resources/loading.gif","components/ResultBox.tsx","components/UploadImage.tsx","components/UploadBox.tsx","components/SettingsBox.tsx","components/ComponentContainer.tsx","helpers/Helpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ResultBox","_ref","images","loadingGifs","BASE_URL","react_default","a","createElement","es_Container","style","overflowX","height","border","color","padding","textAlign","marginTop","length","id","display","width","map","imageName","index","key","src","marginRight","maxWidth","alt","onClick","e","url","win","window","open","focus","handleImageClick","className","Object","toConsumableArray","Array","keys","require","UploadImage","imgSrc","fileName","onDelete","Row","marginLeft","borderRadius","backgroundColor","Col","md","lg","maxHeight","wordBreak","overflowY","marginBottom","overflow","Button","variant","UploadBox","updateImages","filePickerRef","React","createRef","handleDrop","files","allowedTypes","droppedImages","filteredFiles","reduce","res","file","item","fileType","type","test","size","push","forEach","count","reader","FileReader","readAsDataURL","console","log","onloadend","myFile","name","result","sm","ref","multiple","onChange","event","target","current","click","FileDrop","onDrop","img","enc","TextDecoder","imgSrcStr","ArrayBuffer","decode","components_UploadImage","filter","_","i","handleImageDelete","top","position","fontSize","SettingsBox","settings","handleChange","fixedNum","num","parseInt","value","targetMin","min","targetMax","max","fixNumber","placeholder","newSettings","divideX","divideY","quality","Form","Group","controlId","Label","Control","toString","autoComplete","onBlur","Text","ComponentContainer","_useState","useState","_useState2","slicedToArray","setSettings","_useState3","_useState4","setImages","_useState5","_useState6","resultImages","setResults","_useState7","_useState8","loadingCount","setLoadingCount","Jumbotron","components_UploadBox","newImages","components_SettingsBox","service","XMLHttpRequest","formData","FormData","image","decoded","split","convertOptions","X","Y","Q","GetExisting","append","JSON","stringify","b64Data","contentType","arguments","undefined","sliceSize","byteCharacters","atob","byteArrays","offset","slice","byteNumbers","charCodeAt","byteArray","Uint8Array","Blob","b64toBlob","addEventListener","responseObj","parse","this","responseText","alert","send","flex","disabled","components_ResultBox","App","components_ComponentContainer","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cf5b68e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.48e2f87d.gif\";","import React from 'react';\nimport \"../style/ResultBox.css\";\nimport { Container } from \"react-bootstrap\";\n\ninterface IResultBox {\n    images: Array<string>,\n    loadingGifs: number\n}\n\nconst ResultBox: React.FC<IResultBox> = ({ images, loadingGifs }) => {\n    const BASE_URL = \"https://kenansoylu.com/vm/pokiki?image=\"\n    // const BASE_URL = \"http://localhost:5000/pokiki?image=\"\n\n    const handleImageClick = (url: string) => {\n        const win = window.open(url, '_blank');\n        if (win) win.focus();\n    }\n\n    return (\n        <Container style={{\n            overflowX: \"auto\", height: 300,\n            border: '1px solid white',\n            color: 'white', padding: 20,\n            textAlign: \"center\",\n            marginTop: 20,\n        }}>\n            {images.length > 0 ? (\n                <div id=\"react-file-drop-demo\" style={{\n                    display: \"flex\",\n                    width: \"fit-content\"\n                }}>\n                    {\n                        images.map((imageName, index) => (\n                            <img key={index} src={BASE_URL + imageName}\n                                style={{\n                                    height: \"-webkit-fill-available\", width: \"-webkit-fill-available\",\n                                    marginRight: 25, maxWidth: \"25%\"\n                                }}\n                                alt=\"Result\" onClick={(e) => handleImageClick(BASE_URL + imageName)}\n                                className=\"result-image\" />\n                        ))\n                    }\n                </div>\n            ) : ( loadingGifs > 0 ? (\n                <div style={{ display: \"flex\",width: \"fit-content\"}}>\n                    {\n                        [...Array(loadingGifs).keys()].map((index : number) => (\n                            <img key={index} src={require(\"../resources/loading.gif\")} \n                            alt=\"loading\" style={{height: \"-webkit-fill-available\", \n                            width: \"-webkit-fill-available\", marginRight: 25, maxWidth: \"25%\"}}/>\n                        ))\n                    }\n                </div>\n            ):(\n                <span>Results</span>\n            ))}\n        </Container>\n    );\n}\n\nexport default ResultBox;","import React from 'react';\nimport \"../style/ResultBox.css\";\nimport { Row, Button, Col } from 'react-bootstrap';\n\ninterface IUploadImageProps {\n    imgSrc: string,\n    fileName: string,\n    onDelete: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined,\n}\n\nconst UploadImage: React.FC<IUploadImageProps> = ({ imgSrc, fileName, onDelete }) => {\n\n    return (\n        <Row style={{\n            border: '1px solid white',\n            color: 'white',\n            textAlign: \"left\",\n            marginTop: 10,\n            marginRight: 0,\n            marginLeft: 0,\n            borderRadius: 3,\n            height: \"33%\",\n            backgroundColor: \"darkslategray\"\n        }}>\n            <Col md={5} lg={5} style={{maxHeight : \"100%\"}}>\n                <img src={imgSrc} alt=\"Uploaded\" \n                    style={{padding : \"10px\", maxHeight : \"100%\", maxWidth: \"100%\"}}/>\n            </Col>\n            <Col md={4} lg={4} style={{wordBreak: \"break-word\", maxHeight: \"100%\",\n                overflowY: \"auto\", marginTop : \"auto\", marginBottom : \"auto\"}}>\n                <span>\n                {fileName}\n                </span>\n            </Col>\n            <Col md={3} lg={3} style={{ overflow: \"hidden\", display: \"flex\", maxHeight: \"100%\" }}>\n                <Button variant=\"danger\" onClick={onDelete} style={{width: \"100%\", marginTop: \"auto\",\n                    marginBottom: \"auto\", height: \"80%\"}}>\n                    Delete\n                </Button>\n            </Col>\n        </Row>\n    );\n}\n\nexport default UploadImage;","import React from 'react';\nimport FileDrop from 'react-file-drop';\nimport \"../style/UploadBox.css\";\nimport { Col, Container } from \"react-bootstrap\";\nimport UploadImage from './UploadImage';\nimport { MyFile } from \"./ComponentContainer\";\n\ninterface IUploadBox {\n    images: MyFile[],\n    updateImages: (newImages: Array<MyFile>) => void\n}\n\nconst UploadBox: React.FC<IUploadBox> = ({ images, updateImages }) => {\n\n    const filePickerRef = React.createRef() as React.RefObject<HTMLInputElement>;\n\n    const handleDrop = (files: FileList | null) => {\n        var allowedTypes = /(image\\/)[a-zA-Z]*/;\n        if (files) {\n            var droppedImages = Array<MyFile>();\n            const filteredFiles = [...Array(files.length).keys()].reduce((res: Array<File>, index: number) => {\n                const file = files.item(index);\n                const fileType = file ? file.type : \"\";\n                if (allowedTypes.test(fileType) && file && file.size < 1000000) res.push(file);\n                return res;\n            }, Array<File>());\n\n            filteredFiles.forEach((file: File, count: number) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file);\n                console.log(file.size);\n                \n                reader.onloadend = () => {\n\n                    const myFile: MyFile = {\n                        name: file.name,\n                        size: file.size,\n                        type: file.type,\n                        src: reader.result ? reader.result : \"\"\n                    };\n\n                    droppedImages.push(myFile);\n\n                    if (count === filteredFiles.length - 1) updateImages(droppedImages);\n                }\n            });\n        }\n    }\n\n    const openFilePicker = () => {\n        if (filePickerRef.current && images.length === 0) filePickerRef.current.click();\n    }\n\n    const handleImageDelete = (e: any, index: number) => {\n        updateImages(images.filter((_, i) => i !== index));\n    }\n\n    return (\n        <Col lg={6} md={6} sm={12}>\n            <div id=\"react-file-drop-demo\" style={{\n                border: '1px solid white',\n                color: 'white', padding: 10,\n                textAlign: \"center\",\n                height: \"100%\"\n            }}>\n\n                <input type=\"file\" ref={filePickerRef} multiple style={{ display: \"none\" }}\n                    onChange={(event) => handleDrop(event.target.files)} />\n\n                <div style={{ height: \"100%\" }} onClick={openFilePicker}>\n                    <FileDrop onDrop={(files, event) => handleDrop(files)}>\n                        <Container style={{\n                            width: \"100%\",\n                            height: \"100%\",\n                            overflowY: \"auto\"\n                        }}>\n                            {images.map((img, index) => {\n                                const enc = new TextDecoder(\"utf-8\");\n\n                                const imgSrc = img.src ? img.src : \"\";\n                                const imgSrcStr = typeof imgSrc === typeof ArrayBuffer ? enc.decode(imgSrc as ArrayBuffer) : imgSrc as string;\n\n                                return (<UploadImage key={index} onDelete={(e: any) => handleImageDelete(e, index)}\n                                    imgSrc={imgSrcStr} fileName={img.name} />);\n                            })}\n                            {images.length === 0 &&\n                                <div style={{ height: \"100%\" }}>\n                                    <div style={{ top: \"50%\", position: \"relative\" }}>\n                                        <span style={{fontSize:\"large\"}}>\n                                            Click Or Drop Your Images Here!\n                                        </span>\n                                        <br/>\n                                        <span style={{fontSize:\"small\"}}>\n                                            (Allowed Maximum Single File Size Is 1MB)\n                                        </span>\n                                    </div>\n                                </div>\n                            }\n                        </Container>\n                    </FileDrop>\n                </div>\n\n            </div>\n        </Col>\n    );\n}\n\nexport default UploadBox;","import React from 'react';\nimport \"../style/SettingsBox.css\";\nimport { Col, Form } from \"react-bootstrap\";\nimport { Settings } from \"./ComponentContainer\";\n\ninterface ISettingsBox {\n    settings: Settings,\n    handleChange: (arg: Settings) => void\n}\n\nconst SettingsBox: React.FC<ISettingsBox> = ({ settings, handleChange }) => {\n\n    const fixNumber = (target: any) => {\n        const num = parseInt(target.value);\n        const targetMin = parseInt(target.min);\n        const targetMax = parseInt(target.max);\n\n        return num < targetMin ? targetMin : num > targetMax ? targetMax : num;\n    }\n\n    const onChange = (type: string, event: any) => {\n        const fixedNum = type === \"fix\" ? fixNumber(event.target) : event.target.value;\n\n        switch (event.target.placeholder) {\n            case \"Horizontal\":\n                {\n                    const newSettings: Settings = {\n                        divideX: fixedNum,\n                        divideY: settings.divideY,\n                        quality: settings.quality\n                    };\n                    handleChange(newSettings);\n                }\n                break;\n            case \"Vertical\":\n                {\n                    const newSettings: Settings = {\n                        divideX: settings.divideX,\n                        divideY: fixedNum,\n                        quality: settings.quality\n                    };\n                    handleChange(newSettings);\n                }\n                break;\n            case \"Quality\":\n                {\n                    const newSettings: Settings = {\n                        divideX: settings.divideX,\n                        divideY: settings.divideY,\n                        quality: fixedNum\n                    };\n                    handleChange(newSettings);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <Col lg={6} md={6} sm={12}>\n            <div style={{\n                border: '1px solid white',\n                color: 'white', padding: 20\n            }}>\n                <Form.Group controlId=\"settings\">\n                    <Form.Label>Divide By Horizontal [16-128]</Form.Label>\n                    <Form.Control type=\"number\" placeholder=\"Horizontal\" onChange={(e: any) => onChange(\"x\", e)}\n                        value={settings.divideX.toString()} min=\"16\" max=\"128\" autoComplete=\"no\" onBlur={(e: any) => onChange(\"fix\", e)} />\n                    <Form.Text className=\"text-muted\">\n                        Number you want the picture to be divided into horizontally.\n                    </Form.Text>\n\n                    <br />\n                    <Form.Label>Divide By Vertical [16-128]</Form.Label>\n                    <Form.Control type=\"number\" placeholder=\"Vertical\" onChange={(e: any) => onChange(\"y\", e)}\n                        value={settings.divideY.toString()} min=\"16\" max=\"128\" autoComplete=\"no\" onBlur={(e: any) => onChange(\"fix\", e)} />\n                    <Form.Text className=\"text-muted\">\n                        Number you want the picture to be divided into vertically.\n                    </Form.Text>\n\n                    <br />\n                    <Form.Label>Quality [1-4]</Form.Label>\n                    <Form.Control type=\"number\" placeholder=\"Quality\" onChange={(e: any) => onChange(\"q\", e)}\n                        value={settings.quality.toString()} min=\"1\" max=\"4\" autoComplete=\"no\" onBlur={(e: any) => onChange(\"fix\", e)} />\n                    <Form.Text className=\"text-muted\">\n                        Resolution multiplier for the tiles in resulting image.\n                    </Form.Text>\n                </Form.Group>\n                <span style={{fontSize:15}}>(Applies To All The Images)</span>\n            </div>\n        </Col>\n    );\n}\n\nexport default SettingsBox;","import React, { useState } from 'react';\nimport \"../style/Container.css\";\nimport { Jumbotron, Row, Button, Col } from 'react-bootstrap';\nimport ResultBox from \"./ResultBox\";\nimport UploadBox from \"./UploadBox\";\nimport SettingsBox from \"./SettingsBox\";\nimport {b64toBlob} from \"../helpers/Helpers\";\n\nexport type MyFile = {\n    name: string,\n    type: string,\n    size: number,\n    src: string | ArrayBuffer\n}\n\nexport type Settings = {\n    divideX: number,\n    divideY: number,\n    quality: number\n}\n\nconst ComponentContainer: React.FC = () => {\n\n    const initSettings: Settings = {\n        divideX: 32,\n        divideY: 32,\n        quality: 2\n    };\n    // const debugResults = [\n    // \"a.jpg\",\n    // \"canada.png\",\n    // \"courses.png\",\n    // \"git.png\",\n    // \"id.png\",\n    // \"Screenshot_from_2019-05-06_23-36-12.png\",]\n\n    const [settings, setSettings] = useState(initSettings);\n    const [images, setImages] = useState(Array<MyFile>());\n    const [resultImages, setResults] = useState(Array<string>());\n    const [loadingCount, setLoadingCount] = useState(0);\n    // const [resultImages, setResults] = useState(debugResults);\n\n    const updateUploadImages = (newImages: Array<MyFile>) => {\n        setImages(newImages);\n    }\n\n    const handleConvert = () => {\n        const URL = \"https://kenansoylu.com/vm/pokemoned/post-image\";\n        // const URL = \"http://localhost:5000/pokemoned/post-image\";\n        setLoadingCount(images.length);\n\n        const service = new XMLHttpRequest();\n        var formData = new FormData();\n\n        images.forEach(image => {\n            const decoded = (image.src as string).split(\",\")[1];\n            const convertOptions = {\n                \"X\" : settings.divideX.toString(),\n                \"Y\" : settings.divideY.toString(),\n                \"Q\" : settings.quality.toString(),\n                \"GetExisting\" : \"False\"\n            };\n            formData.append(\"options\", JSON.stringify(convertOptions));\n            formData.append(\"image\", b64toBlob(decoded, image.type), image.name);\n        });\n        \n        service.addEventListener(\"load\", function() {\n            setLoadingCount(0);\n            const responseObj = JSON.parse(this.responseText);\n            setResults(responseObj[\"images\"] || []);\n        });\n        service.addEventListener(\"error\", function() {\n            alert(\"Error Sending Files!\");\n            console.log(this.responseText);\n        });\n        service.open(\"post\", URL, true);\n        service.send(formData);\n    }\n\n    const handleChangeSettings = (newSettings: Settings) => {\n        setSettings(newSettings);\n    }\n\n    return (\n        <Jumbotron className=\"component-container\">\n            <Row>\n                <UploadBox updateImages={updateUploadImages} images={images} />\n                <SettingsBox settings={settings} handleChange={handleChangeSettings} />\n            </Row>\n            <Row>\n                <Col lg={12} md={12}>\n                    <Button variant=\"success\" onClick={handleConvert} style={{\n                        flex: 1,\n                        width: \"50%\",\n                        marginRight: \"auto\",\n                        marginLeft: \"auto\",\n                        height: 60,\n                        marginTop: 15,\n                        display: \"block\"\n                    }} disabled={images.length === 0}>\n                        Convert!\n                    </Button>\n                </Col>\n            </Row>\n            <Row>\n                <ResultBox images={resultImages} loadingGifs={loadingCount}/>\n            </Row>\n        </Jumbotron>\n    );\n}\n\nexport default ComponentContainer;","export const b64toBlob = (b64Data : string, contentType='', sliceSize=512) => {\n    const byteCharacters = atob(b64Data);\n    const byteArrays = [];\n  \n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n  \n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n  \n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n  \n    const blob = new Blob(byteArrays, {type: contentType});\n    return blob;\n}\n","import React from 'react';\nimport './style/App.css';\nimport ComponentContainer from \"./components/ComponentContainer\";\n\nconst App: React.FC = () => {\n  return (\n      <ComponentContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}