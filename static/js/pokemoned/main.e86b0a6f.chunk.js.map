{"version":3,"sources":["resources/loading.gif","resources/add_img.png","components/ResultBox.tsx","components/UploadImage.tsx","components/UploadBox.tsx","components/SettingsBox.tsx","components/ComponentContainer.tsx","helpers/Helpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ResultBox","_ref","images","loadingGifs","react_default","a","createElement","Col","lg","md","sm","style","overflowX","overflowY","height","border","padding","textAlign","marginTop","id","display","width","map","imageName","index","key","src","marginRight","maxWidth","alt","onClick","e","url","win","window","open","focus","handleImageClick","className","Object","toConsumableArray","Array","keys","require","UploadImage","imgSrc","fileName","onDelete","Row","color","marginLeft","borderRadius","backgroundColor","maxHeight","wordBreak","marginBottom","overflow","Button","variant","UploadBox","updateImages","filePickerRef","React","createRef","handleDrop","files","allowedTypes","droppedImages","filteredFiles","length","reduce","res","file","item","fileType","type","test","size","push","forEach","count","reader","FileReader","readAsDataURL","onloadend","myFile","name","result","ref","multiple","onChange","event","target","accept","justifyContent","alignItems","current","click","FileDrop","onDrop","es_Container","img","enc","TextDecoder","imgSrcStr","ArrayBuffer","decode","components_UploadImage","filter","_","i","handleImageDelete","fontSize","SettingsBox","settings","handleChange","fixedNum","num","parseInt","value","targetMin","min","targetMax","max","fixNumber","placeholder","newSettings","divideX","divideY","quality","Form","Group","controlId","Label","Control","toString","autoComplete","onBlur","Text","ComponentContainer","_useState","useState","_useState2","slicedToArray","setSettings","_useState3","_useState4","setImages","_useState5","_useState6","loadingCount","setLoadingCount","_useState7","_useState8","resultImages","setResults","Jumbotron","components_UploadBox","newImages","components_SettingsBox","service","XMLHttpRequest","formData","FormData","image","decoded","split","convertOptions","X","Y","Q","GetExisting","SaveFile","append","JSON","stringify","b64Data","contentType","arguments","undefined","sliceSize","byteCharacters","atob","byteArrays","offset","slice","byteNumbers","charCodeAt","byteArray","Uint8Array","Blob","b64toBlob","addEventListener","responseObj","parse","this","responseText","newResults","concat","alert","console","log","send","flex","disabled","components_ResultBox","App","components_ComponentContainer","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oMCyEzBC,SAhEyB,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,OAAQC,EAAkBF,EAAlBE,YAQjD,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,MAAO,CACLC,UAAW,OACXC,UAAW,SACXC,OAAQ,OACRC,OAAQ,kBACRC,QAAS,GACTC,UAAW,SACXC,UAAW,KAGbd,EAAAC,EAAAC,cAAA,OACEa,GAAG,uBACHR,MAAO,CACLS,QAAS,OACTC,MAAO,gBAGRnB,EAAOoB,IAAI,SAACC,EAAWC,GAAZ,OACVpB,EAAAC,EAAAC,cAAA,OACEmB,IAAKD,EACLE,IAhCO,oBAgCSH,EAChBZ,MAAO,CACLG,OAAQ,yBACRO,MAAO,yBACPM,YAAa,GACbC,SAAU,OAEZC,IAAI,SACJC,QAAS,SAACC,GAAD,OAtCM,SAACC,GACxB,IAAMC,EAAMC,OAAOC,KAAKH,EAAK,UACzBC,GAAKA,EAAIG,QAoCWC,CAxCT,oBAwCqCd,IAC5Ce,UAAU,mBAGdlC,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAES,QAAS,OAAQC,MAAO,gBACnCkB,OAAAC,EAAA,EAAAD,CAAIE,MAAMtC,GAAauC,QAAQpB,IAAI,SAACE,GAAD,OAClCpB,EAAAC,EAAAC,cAAA,OACEmB,IAAKD,EACLE,IAAKiB,EAAQ,IACbd,IAAI,UACJlB,MAAO,CACLG,OAAQ,yBACRO,MAAO,yBACPM,YAAa,qCCUdiB,EA7DkC,SAAA3C,GAI3C,IAHJ4C,EAGI5C,EAHJ4C,OACAC,EAEI7C,EAFJ6C,SACAC,EACI9C,EADJ8C,SAEA,OACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CACErC,MAAO,CACLI,OAAQ,kBACRkC,MAAO,QACPhC,UAAW,OACXC,UAAW,GACXS,YAAa,EACbuB,WAAY,EACZC,aAAc,EACdrC,OAAQ,MACRsC,gBAAiB,kBAGnBhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKE,GAAI,EAAGD,GAAI,EAAGG,MAAO,CAAE0C,UAAW,SACrCjD,EAAAC,EAAAC,cAAA,OACEoB,IAAKmB,EACLhB,IAAI,WACJlB,MAAO,CAAEK,QAAS,OAAQqC,UAAW,WAGzCjD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,GAAI,EACJD,GAAI,EACJG,MAAO,CACL2C,UAAW,aACXD,UAAW,OACXxC,UAAW,OACXK,UAAW,OACXqC,aAAc,SAGhBnD,EAAAC,EAAAC,cAAA,YAAOwC,IAET1C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEE,GAAI,EACJD,GAAI,EACJG,MAAO,CAAE6C,SAAU,SAAUpC,QAAS,OAAQiC,UAAW,SAEzDjD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACEC,QAAQ,SACR5B,QAASiB,EACTpC,MAAO,CACLU,MAAO,OACPH,UAAW,OACXqC,aAAc,OACdzC,OAAQ,QAPZ,aCgFO6C,EA5HyB,SAAA1D,GAA8B,IAA3BC,EAA2BD,EAA3BC,OAAQ0D,EAAmB3D,EAAnB2D,aAC3CC,EAAgBC,IAAMC,YAEtBC,EAAa,SAACC,GAClB,IAAIC,EAAe,qBACnB,GAAID,EAAO,CACT,IAAIE,EAAgB1B,QACd2B,EAAgB7B,OAAAC,EAAA,EAAAD,CAAIE,MAAMwB,EAAMI,QAAQ3B,QAAQ4B,OACpD,SAACC,EAAkB/C,GACjB,IAAMgD,EAAOP,EAAMQ,KAAKjD,GAClBkD,EAAWF,EAAOA,EAAKG,KAAO,GAGpC,OAFIT,EAAaU,KAAKF,IAAaF,GAAQA,EAAKK,KAAO,KACrDN,EAAIO,KAAKN,GACJD,GAET9B,SAGF2B,EAAcW,QAAQ,SAACP,EAAYQ,GACjC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcX,GAErBS,EAAOG,UAAY,WACjB,IAAMC,EAAiB,CACrBC,KAAMd,EAAKc,KACXT,KAAML,EAAKK,KACXF,KAAMH,EAAKG,KACXjD,IAAKuD,EAAOM,OAASN,EAAOM,OAAS,IAGvCpB,EAAcW,KAAKO,GAEfL,IAAUZ,EAAcC,OAAS,GAAGT,EAAaO,QAe7D,OACE/D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,MAAO,CACLG,OAAQ,OACRE,QAAS,KAGXZ,EAAAC,EAAAC,cAAA,SACEqE,KAAK,OACLa,IAAK3B,EACL4B,UAAQ,EACR9E,MAAO,CAAES,QAAS,QAClBsE,SAAU,SAACC,GAAD,OAAW3B,EAAW2B,EAAMC,OAAO3B,QAC7C4B,OAAO,YAGTzF,EAAAC,EAAAC,cAAA,OACEK,MAAO,CACLG,OAAQ,OACRgF,eAAgB,SAChBC,WAAY,UAEdjE,QAlCiB,WACjB+B,EAAcmC,SAA6B,IAAlB9F,EAAOmE,QAClCR,EAAcmC,QAAQC,UAkCpB7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAUC,OAAQ,SAAClC,EAAO0B,GAAR,OAAkB3B,EAAWC,KAC7C7D,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CACEzF,MAAO,CACLE,UAAW,OACXiF,eAAgB,SAChBC,WAAY,WAGb7F,EAAOoB,IAAI,SAAC+E,EAAK7E,GAChB,IAAM8E,EAAM,IAAIC,YAAY,SAEtB1D,EAASwD,EAAI3E,IAAM2E,EAAI3E,IAAM,GAC7B8E,SACG3D,WAAkB4D,YACrBH,EAAII,OAAO7D,GACVA,EAEP,OACEzC,EAAAC,EAAAC,cAACqG,EAAD,CACElF,IAAKD,EACLuB,SAAU,SAAChB,GAAD,OAnDA,SAACA,EAAQP,GACjCoC,EAAa1D,EAAO0G,OAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMtF,KAkDPuF,CAAkBhF,EAAGP,IAC3CqB,OAAQ2D,EACR1D,SAAUuD,EAAIf,SAID,IAAlBpF,EAAOmE,QACNjE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEoB,IAAKiB,EAAQ,IACbd,IAAI,MACJlB,MAAO,CACLG,OAAQ,QACRO,MAAO,QACPuF,OAAQ,iBAGZxG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMK,MAAO,CAAEqG,SAAU,UAAzB,mECFDC,EAhH6B,SAAAhH,GAAgC,IAA7BiH,EAA6BjH,EAA7BiH,SAAUC,EAAmBlH,EAAnBkH,aASjDzB,EAAW,SAACf,EAAcgB,GAC9B,IAAMyB,EACK,QAATzC,EAVc,SAACiB,GACjB,IAAMyB,EAAMC,SAAS1B,EAAO2B,OACtBC,EAAYF,SAAS1B,EAAO6B,KAC5BC,EAAYJ,SAAS1B,EAAO+B,KAElC,OAAON,EAAMG,EAAYA,EAAYH,EAAMK,EAAYA,EAAYL,EAKhDO,CAAUjC,EAAMC,QAAUD,EAAMC,OAAO2B,MAE1D,OAAQ5B,EAAMC,OAAOiC,aACnB,IAAK,aAED,IAAMC,EAAwB,CAC5BC,QAASX,EACTY,QAASd,EAASc,QAClBC,QAASf,EAASe,SAEpBd,EAAaW,GAEf,MACF,IAAK,WAED,IAAMA,EAAwB,CAC5BC,QAASb,EAASa,QAClBC,QAASZ,EACTa,QAASf,EAASe,SAEpBd,EAAaW,GAEf,MACF,IAAK,UAED,IAAMA,EAAwB,CAC5BC,QAASb,EAASa,QAClBC,QAASd,EAASc,QAClBC,QAASb,GAEXD,EAAaW,KAQrB,OACE1H,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,MAAO,CACLG,OAAQ,OACRE,QAAS,KAGXZ,EAAAC,EAAAC,cAAC4H,EAAA,EAAKC,MAAN,CAAYC,UAAU,YACpBhI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKG,MAAN,sCACAjI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKI,QAAN,CACE3D,KAAK,SACLkD,YAAY,aACZnC,SAAU,SAAC3D,GAAD,OAAY2D,EAAS,IAAK3D,IACpCwF,MAAOL,EAASa,QAAQQ,WACxBd,IAAI,KACJE,IAAI,MACJa,aAAa,KACbC,OAAQ,SAAC1G,GAAD,OAAY2D,EAAS,MAAO3D,MAEtC3B,EAAAC,EAAAC,cAAC4H,EAAA,EAAKQ,KAAN,CAAWpG,UAAU,cAArB,gEAIAlC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4H,EAAA,EAAKG,MAAN,oCACAjI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKI,QAAN,CACE3D,KAAK,SACLkD,YAAY,WACZnC,SAAU,SAAC3D,GAAD,OAAY2D,EAAS,IAAK3D,IACpCwF,MAAOL,EAASc,QAAQO,WACxBd,IAAI,KACJE,IAAI,MACJa,aAAa,KACbC,OAAQ,SAAC1G,GAAD,OAAY2D,EAAS,MAAO3D,MAEtC3B,EAAAC,EAAAC,cAAC4H,EAAA,EAAKQ,KAAN,CAAWpG,UAAU,cAArB,8DAIAlC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4H,EAAA,EAAKG,MAAN,sBACAjI,EAAAC,EAAAC,cAAC4H,EAAA,EAAKI,QAAN,CACE3D,KAAK,SACLkD,YAAY,UACZnC,SAAU,SAAC3D,GAAD,OAAY2D,EAAS,IAAK3D,IACpCwF,MAAOL,EAASe,QAAQM,WACxBd,IAAI,IACJE,IAAI,IACJa,aAAa,KACbC,OAAQ,SAAC1G,GAAD,OAAY2D,EAAS,MAAO3D,MAEtC3B,EAAAC,EAAAC,cAAC4H,EAAA,EAAKQ,KAAN,CAAWpG,UAAU,cAArB,4DAIFlC,EAAAC,EAAAC,cAAA,QAAMK,MAAO,CAAEqG,SAAU,KAAzB,iCCKS2B,EArGsB,WACnC,IADyCC,EAcTC,mBAbD,CAC7Bd,QAAS,GACTC,QAAS,GACTC,QAAS,IAJ8Ba,EAAAvG,OAAAwG,EAAA,EAAAxG,CAAAqG,EAAA,GAclC1B,EAdkC4B,EAAA,GAcxBE,EAdwBF,EAAA,GAAAG,EAebJ,mBAASpG,SAfIyG,EAAA3G,OAAAwG,EAAA,EAAAxG,CAAA0G,EAAA,GAelC/I,EAfkCgJ,EAAA,GAe1BC,EAf0BD,EAAA,GAAAE,EAgBDP,mBAAS,GAhBRQ,EAAA9G,OAAAwG,EAAA,EAAAxG,CAAA6G,EAAA,GAgBlCE,EAhBkCD,EAAA,GAgBpBE,EAhBoBF,EAAA,GAAAG,EAiBNX,mBAASpG,SAjBHgH,EAAAlH,OAAAwG,EAAA,EAAAxG,CAAAiH,EAAA,GAiBlCE,EAjBkCD,EAAA,GAiBpBE,EAjBoBF,EAAA,GAiEzC,OACErJ,EAAAC,EAAAC,cAACsJ,EAAA,EAAD,CAAWtH,UAAU,uBACnBlC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAACuJ,EAAD,CAAWjG,aAhDU,SAACkG,GAC1BX,EAAUW,IA+CuC5J,OAAQA,IAErDE,EAAAC,EAAAC,cAACyJ,EAAD,CAAa7C,SAAUA,EAAUC,aATV,SAACW,GAC5BkB,EAAYlB,OAUV1H,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,IACfL,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACEC,QAAQ,UACR5B,QApDY,WAEpByH,EAAgBrJ,EAAOmE,QAEvB,IAAM2F,EAAU,IAAIC,eAChBC,EAAW,IAAIC,SAEnBjK,EAAO6E,QAAQ,SAACqF,GACd,IAAMC,EAAWD,EAAM1I,IAAe4I,MAAM,KAAK,GAC3CC,EAAiB,CACrBC,EAAGtD,EAASa,QAAQQ,WACpBkC,EAAGvD,EAASc,QAAQO,WACpBmC,EAAGxD,EAASe,QAAQM,WACpBoC,YAAa,QACbC,SAAU,QAEZV,EAASW,OAAO,UAAWC,KAAKC,UAAUR,IAC1CL,EAASW,OAAO,QC9DG,SAACG,GAItB,IAJ0E,IAAlCC,EAAkCC,UAAA7G,OAAA,QAAA8G,IAAAD,UAAA,GAAAA,UAAA,GAAtB,GAAIE,EAAkBF,UAAA7G,OAAA,QAAA8G,IAAAD,UAAA,GAAAA,UAAA,GAAR,IAC5DG,EAAiBC,KAAKN,GACtBO,EAAa,GAEVC,EAAS,EAAGA,EAASH,EAAehH,OAAQmH,GAAUJ,EAAW,CAIxE,IAHA,IAAMK,EAAQJ,EAAeI,MAAMD,EAAQA,EAASJ,GAE9CM,EAAc,IAAIjJ,MAAMgJ,EAAMpH,QAC3ByC,EAAI,EAAGA,EAAI2E,EAAMpH,OAAQyC,IAChC4E,EAAY5E,GAAK2E,EAAME,WAAW7E,GAGpC,IAAM8E,EAAY,IAAIC,WAAWH,GACjCH,EAAWzG,KAAK8G,GAIlB,OADa,IAAIE,KAAKP,EAAY,CAAC5G,KAAMsG,ID8Cdc,CAAU1B,EAASD,EAAMzF,MAAOyF,EAAM9E,QAGjE0E,EAAQgC,iBAAiB,OAAQ,WAC/BzC,EAAgB,GAChB,IAAM0C,EAAcnB,KAAKoB,MAAMC,KAAKC,cAC9BC,EAAa5J,QAAgB6J,OACjC5C,EACAuC,EAAW,QAAc,IAE3BtC,EAAW0C,KAEbrC,EAAQgC,iBAAiB,QAAS,WAChCO,MAAM,4BACNC,QAAQC,IAAIN,KAAKC,gBAEnBpC,EAAQ7H,KAAK,OAhCD,yBAgCc,GAC1B6H,EAAQ0C,KAAKxC,IAmBLvJ,MAAO,CACLgM,KAAM,EACNtL,MAAO,MACPM,YAAa,OACbuB,WAAY,OACZpC,OAAQ,GACRI,UAAW,GACXE,QAAS,SAEXwL,SAA4B,IAAlB1M,EAAOmE,QAZnB,cAkBJjE,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IAChBL,EAAAC,EAAAC,cAACuM,EAAD,CAAW3M,OAAQwJ,EAAcvJ,YAAamJ,IAC9ClJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,OE1GTqM,EANO,WACpB,OACI1M,EAAAC,EAAAC,cAACyM,EAAD,OCMcC,QACW,cAA7B9K,OAAO+K,SAASC,UAEe,UAA7BhL,OAAO+K,SAASC,UAEhBhL,OAAO+K,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjN,EAAAC,EAAAC,cAACgN,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"js/pokemoned/main.e86b0a6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/loading.48e2f87d.gif\";","module.exports = __webpack_public_path__ + \"media/add_img.8ca6daa5.png\";","import React from \"react\";\nimport \"../style/ResultBox.css\";\nimport { Col } from \"react-bootstrap\";\n\ninterface IResultBox {\n  images: Array<string>;\n  loadingGifs: number;\n}\n\nconst ResultBox: React.FC<IResultBox> = ({ images, loadingGifs }) => {\n  const BASE_URL = \"/pokemoned?image=\";\n\n  const handleImageClick = (url: string) => {\n    const win = window.open(url, \"_blank\");\n    if (win) win.focus();\n  };\n\n  return (\n    <Col\n      lg={10}\n      md={10}\n      sm={10}\n      style={{\n        overflowX: \"auto\",\n        overflowY: \"hidden\",\n        height: \"30vh\",\n        border: \"1px solid white\",\n        padding: 20,\n        textAlign: \"center\",\n        marginTop: 20,\n      }}\n    >\n      <div\n        id=\"react-file-drop-demo\"\n        style={{\n          display: \"flex\",\n          width: \"fit-content\",\n        }}\n      >\n        {images.map((imageName, index) => (\n          <img\n            key={index}\n            src={BASE_URL + imageName}\n            style={{\n              height: \"-webkit-fill-available\",\n              width: \"-webkit-fill-available\",\n              marginRight: 25,\n              maxWidth: \"25%\",\n            }}\n            alt=\"Result\"\n            onClick={(e) => handleImageClick(BASE_URL + imageName)}\n            className=\"result-image\"\n          />\n        ))}\n        <div style={{ display: \"flex\", width: \"fit-content\" }}>\n          {[...Array(loadingGifs).keys()].map((index: number) => (\n            <img\n              key={index}\n              src={require(\"../resources/loading.gif\")}\n              alt=\"loading\"\n              style={{\n                height: \"-webkit-fill-available\",\n                width: \"-webkit-fill-available\",\n                marginRight: 25,\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </Col>\n  );\n};\n\nexport default ResultBox;\n","import React from \"react\";\nimport \"../style/ResultBox.css\";\nimport { Row, Button, Col } from \"react-bootstrap\";\n\ninterface IUploadImageProps {\n  imgSrc: string;\n  fileName: string;\n  onDelete:\n    | ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)\n    | undefined;\n}\n\nconst UploadImage: React.FC<IUploadImageProps> = ({\n  imgSrc,\n  fileName,\n  onDelete,\n}) => {\n  return (\n    <Row\n      style={{\n        border: \"1px solid white\",\n        color: \"white\",\n        textAlign: \"left\",\n        marginTop: 10,\n        marginRight: 0,\n        marginLeft: 0,\n        borderRadius: 3,\n        height: \"30%\",\n        backgroundColor: \"darkslategray\",\n      }}\n    >\n      <Col md={5} lg={5} style={{ maxHeight: \"100%\" }}>\n        <img\n          src={imgSrc}\n          alt=\"Uploaded\"\n          style={{ padding: \"10px\", maxHeight: \"100%\" }}\n        />\n      </Col>\n      <Col\n        md={4}\n        lg={4}\n        style={{\n          wordBreak: \"break-word\",\n          maxHeight: \"100%\",\n          overflowY: \"auto\",\n          marginTop: \"auto\",\n          marginBottom: \"auto\",\n        }}\n      >\n        <span>{fileName}</span>\n      </Col>\n      <Col\n        md={3}\n        lg={3}\n        style={{ overflow: \"hidden\", display: \"flex\", maxHeight: \"100%\" }}\n      >\n        <Button\n          variant=\"danger\"\n          onClick={onDelete}\n          style={{\n            width: \"100%\",\n            marginTop: \"auto\",\n            marginBottom: \"auto\",\n            height: \"80%\",\n          }}\n        >\n          Delete\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n\nexport default UploadImage;\n","import React from \"react\";\nimport FileDrop from \"react-file-drop\";\nimport \"../style/UploadBox.css\";\nimport { Col, Container } from \"react-bootstrap\";\nimport UploadImage from \"./UploadImage\";\nimport { MyFile } from \"./ComponentContainer\";\n\ninterface IUploadBox {\n  images: MyFile[];\n  updateImages: (newImages: Array<MyFile>) => void;\n}\n\nconst UploadBox: React.FC<IUploadBox> = ({ images, updateImages }) => {\n  const filePickerRef = React.createRef() as React.RefObject<HTMLInputElement>;\n\n  const handleDrop = (files: FileList | null) => {\n    var allowedTypes = /(image\\/)[a-zA-Z]*/;\n    if (files) {\n      var droppedImages = Array<MyFile>();\n      const filteredFiles = [...Array(files.length).keys()].reduce(\n        (res: Array<File>, index: number) => {\n          const file = files.item(index);\n          const fileType = file ? file.type : \"\";\n          if (allowedTypes.test(fileType) && file && file.size < 5000000)\n            res.push(file);\n          return res;\n        },\n        Array<File>()\n      );\n\n      filteredFiles.forEach((file: File, count: number) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onloadend = () => {\n          const myFile: MyFile = {\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            src: reader.result ? reader.result : \"\",\n          };\n\n          droppedImages.push(myFile);\n\n          if (count === filteredFiles.length - 1) updateImages(droppedImages);\n        };\n      });\n    }\n  };\n\n  const openFilePicker = () => {\n    if (filePickerRef.current && images.length === 0)\n      filePickerRef.current.click();\n  };\n\n  const handleImageDelete = (e: any, index: number) => {\n    updateImages(images.filter((_, i) => i !== index));\n  };\n\n  return (\n    <Col\n      lg={6}\n      md={6}\n      sm={12}\n      style={{\n        height: \"45vh\",\n        padding: 10,\n      }}\n    >\n      <input\n        type=\"file\"\n        ref={filePickerRef}\n        multiple\n        style={{ display: \"none\" }}\n        onChange={(event) => handleDrop(event.target.files)}\n        accept=\"image/*\"\n      />\n\n      <div\n        style={{\n          height: \"100%\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n        onClick={openFilePicker}\n      >\n        <FileDrop onDrop={(files, event) => handleDrop(files)}>\n          <Container\n            style={{\n              overflowY: \"auto\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {images.map((img, index) => {\n              const enc = new TextDecoder(\"utf-8\");\n\n              const imgSrc = img.src ? img.src : \"\";\n              const imgSrcStr =\n                typeof imgSrc === typeof ArrayBuffer\n                  ? enc.decode(imgSrc as ArrayBuffer)\n                  : (imgSrc as string);\n\n              return (\n                <UploadImage\n                  key={index}\n                  onDelete={(e: any) => handleImageDelete(e, index)}\n                  imgSrc={imgSrcStr}\n                  fileName={img.name}\n                />\n              );\n            })}\n            {images.length === 0 && (\n              <div>\n                <img\n                  src={require(\"../resources/add_img.png\")}\n                  alt=\"Add\"\n                  style={{\n                    height: \"150px\",\n                    width: \"150px\",\n                    filter: \"invert(75%)\",\n                  }}\n                />\n                <br />\n                <span style={{ fontSize: \"small\" }}>\n                  (Allowed Maximum Single File Size Is 5MB)\n                </span>\n              </div>\n            )}\n          </Container>\n        </FileDrop>\n      </div>\n    </Col>\n  );\n};\n\nexport default UploadBox;\n","import React from \"react\";\nimport \"../style/SettingsBox.css\";\nimport { Col, Form } from \"react-bootstrap\";\nimport { Settings } from \"./ComponentContainer\";\n\ninterface ISettingsBox {\n  settings: Settings;\n  handleChange: (arg: Settings) => void;\n}\n\nconst SettingsBox: React.FC<ISettingsBox> = ({ settings, handleChange }) => {\n  const fixNumber = (target: any) => {\n    const num = parseInt(target.value);\n    const targetMin = parseInt(target.min);\n    const targetMax = parseInt(target.max);\n\n    return num < targetMin ? targetMin : num > targetMax ? targetMax : num;\n  };\n\n  const onChange = (type: string, event: any) => {\n    const fixedNum =\n      type === \"fix\" ? fixNumber(event.target) : event.target.value;\n\n    switch (event.target.placeholder) {\n      case \"Horizontal\":\n        {\n          const newSettings: Settings = {\n            divideX: fixedNum,\n            divideY: settings.divideY,\n            quality: settings.quality,\n          };\n          handleChange(newSettings);\n        }\n        break;\n      case \"Vertical\":\n        {\n          const newSettings: Settings = {\n            divideX: settings.divideX,\n            divideY: fixedNum,\n            quality: settings.quality,\n          };\n          handleChange(newSettings);\n        }\n        break;\n      case \"Quality\":\n        {\n          const newSettings: Settings = {\n            divideX: settings.divideX,\n            divideY: settings.divideY,\n            quality: fixedNum,\n          };\n          handleChange(newSettings);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Col\n      lg={6}\n      md={6}\n      sm={12}\n      style={{\n        height: \"45vh\",\n        padding: 20,\n      }}\n    >\n      <Form.Group controlId=\"settings\">\n        <Form.Label>Divide By Horizontal [16-128]</Form.Label>\n        <Form.Control\n          type=\"number\"\n          placeholder=\"Horizontal\"\n          onChange={(e: any) => onChange(\"x\", e)}\n          value={settings.divideX.toString()}\n          min=\"16\"\n          max=\"128\"\n          autoComplete=\"no\"\n          onBlur={(e: any) => onChange(\"fix\", e)}\n        />\n        <Form.Text className=\"text-muted\">\n          Number you want the picture to be divided into horizontally.\n        </Form.Text>\n\n        <br />\n        <Form.Label>Divide By Vertical [16-128]</Form.Label>\n        <Form.Control\n          type=\"number\"\n          placeholder=\"Vertical\"\n          onChange={(e: any) => onChange(\"y\", e)}\n          value={settings.divideY.toString()}\n          min=\"16\"\n          max=\"128\"\n          autoComplete=\"no\"\n          onBlur={(e: any) => onChange(\"fix\", e)}\n        />\n        <Form.Text className=\"text-muted\">\n          Number you want the picture to be divided into vertically.\n        </Form.Text>\n\n        <br />\n        <Form.Label>Quality [1-4]</Form.Label>\n        <Form.Control\n          type=\"number\"\n          placeholder=\"Quality\"\n          onChange={(e: any) => onChange(\"q\", e)}\n          value={settings.quality.toString()}\n          min=\"1\"\n          max=\"4\"\n          autoComplete=\"no\"\n          onBlur={(e: any) => onChange(\"fix\", e)}\n        />\n        <Form.Text className=\"text-muted\">\n          Resolution multiplier for the tiles in resulting image.\n        </Form.Text>\n      </Form.Group>\n      <span style={{ fontSize: 15 }}>(Applies To All The Images)</span>\n    </Col>\n  );\n};\n\nexport default SettingsBox;\n","import React, { useState } from \"react\";\nimport \"../style/Container.css\";\nimport { Jumbotron, Row, Button, Col } from \"react-bootstrap\";\nimport ResultBox from \"./ResultBox\";\nimport UploadBox from \"./UploadBox\";\nimport SettingsBox from \"./SettingsBox\";\nimport { b64toBlob } from \"../helpers/Helpers\";\n\nexport type MyFile = {\n  name: string;\n  type: string;\n  size: number;\n  src: string | ArrayBuffer;\n};\n\nexport type Settings = {\n  divideX: number;\n  divideY: number;\n  quality: number;\n};\n\nconst ComponentContainer: React.FC = () => {\n  const initSettings: Settings = {\n    divideX: 32,\n    divideY: 32,\n    quality: 2,\n  };\n  // const debugResults = [\n  // \"a.jpg\",\n  // \"canada.png\",\n  // \"courses.png\",\n  // \"git.png\",\n  // \"id.png\",\n  // \"Screenshot_from_2019-05-06_23-36-12.png\",]\n\n  const [settings, setSettings] = useState(initSettings);\n  const [images, setImages] = useState(Array<MyFile>());\n  const [loadingCount, setLoadingCount] = useState(0);\n  const [resultImages, setResults] = useState(Array<string>());\n  // const [resultImages, setResults] = useState(debugResults);\n\n  const updateUploadImages = (newImages: Array<MyFile>) => {\n    setImages(newImages);\n  };\n\n  const handleConvert = () => {\n    const URL = \"/pokemoned/post-image\";\n    setLoadingCount(images.length);\n\n    const service = new XMLHttpRequest();\n    var formData = new FormData();\n\n    images.forEach((image) => {\n      const decoded = (image.src as string).split(\",\")[1];\n      const convertOptions = {\n        X: settings.divideX.toString(),\n        Y: settings.divideY.toString(),\n        Q: settings.quality.toString(),\n        GetExisting: \"False\",\n        SaveFile: \"True\",\n      };\n      formData.append(\"options\", JSON.stringify(convertOptions));\n      formData.append(\"image\", b64toBlob(decoded, image.type), image.name);\n    });\n\n    service.addEventListener(\"load\", function () {\n      setLoadingCount(0);\n      const responseObj = JSON.parse(this.responseText);\n      const newResults = Array<string>().concat(\n        resultImages,\n        responseObj[\"images\"] || []\n      );\n      setResults(newResults);\n    });\n    service.addEventListener(\"error\", function () {\n      alert(\"Error Converting Images!\");\n      console.log(this.responseText);\n    });\n    service.open(\"post\", URL, true);\n    service.send(formData);\n  };\n\n  const handleChangeSettings = (newSettings: Settings) => {\n    setSettings(newSettings);\n  };\n\n  return (\n    <Jumbotron className=\"component-container\">\n      <Row>\n        <UploadBox updateImages={updateUploadImages} images={images} />\n\n        <SettingsBox settings={settings} handleChange={handleChangeSettings} />\n      </Row>\n      <Row>\n        <Col lg={12} md={12}>\n          <Button\n            variant=\"success\"\n            onClick={handleConvert}\n            style={{\n              flex: 1,\n              width: \"50%\",\n              marginRight: \"auto\",\n              marginLeft: \"auto\",\n              height: 60,\n              marginTop: 15,\n              display: \"block\",\n            }}\n            disabled={images.length === 0}\n          >\n            Convert!\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col lg={1} md={1} />\n        <ResultBox images={resultImages} loadingGifs={loadingCount} />\n        <Col lg={1} md={1} />\n      </Row>\n    </Jumbotron>\n  );\n};\n\nexport default ComponentContainer;\n","export const b64toBlob = (b64Data : string, contentType='', sliceSize=512) => {\n    const byteCharacters = atob(b64Data);\n    const byteArrays = [];\n  \n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n  \n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n  \n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n  \n    const blob = new Blob(byteArrays, {type: contentType});\n    return blob;\n}\n","import React from 'react';\nimport './style/App.css';\nimport ComponentContainer from \"./components/ComponentContainer\";\n\nconst App: React.FC = () => {\n  return (\n      <ComponentContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}